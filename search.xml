<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>React:Using hooks with function based components</title>
    <url>/2023/06/26/React-Using-hooks-with-function-based-components/</url>
    <content><![CDATA[<p><img src="/img/posts/1.jpg" alt="image"></p>
<blockquote>
<p>Nowadays, function based components has become a more recommended approach in modern React development, and React&#39;s &quot;hooks&quot; is one of the most important contributors of this ecosystem. This series serves as a study note during my study with the hands-on React projects found on <a href="https://github.com/john-smilga/react-projects">john-smilga&#39;s repo</a></p>
</blockquote>
<p><a href="https://react.dev/reference/react">Official documentation of React hooks</a></p>
<h3 id="Why-using-hooks"><a href="#Why-using-hooks" class="headerlink" title="Why using hooks? "></a>Why using hooks? <hr></h3><p>React hooks allows function components to have features that only class components have before. For example, state management and lifecycle methods. </p>
<h3 id="Benefits-of-using-hooks"><a href="#Benefits-of-using-hooks" class="headerlink" title="Benefits of using hooks "></a>Benefits of using hooks <hr></h3><ul>
<li>Simplified component logic: Hooks help reduce code duplication and make it easier to understand and maintain component logic.</li>
<li>Improved reusability: Hooks allow you to encapsulate and reuse stateful logic across multiple components.</li>
<li>No need for class components: Hooks eliminate the need for class-based components, promoting the use of function components.</li>
</ul>
<h3 id="Class-component-vs-Function-component"><a href="#Class-component-vs-Function-component" class="headerlink" title="Class component vs Function component "></a>Class component vs Function component <hr></h3><p>Class component:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Something extends React.Component &#123;</span><br><span class="line">    constructor(props)&#123;</span><br><span class="line">        super(props);</span><br><span class="line">        ...//state logic, binding event handlers, etc. </span><br><span class="line">    &#125;</span><br><span class="line">    render()&#123;</span><br><span class="line">        ...//handle internal logic</span><br><span class="line">        return (</span><br><span class="line">            //JSX component</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Function component:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const something = () =&gt; &#123; //using arrow function syntax </span><br><span class="line">    return (</span><br><span class="line">        //JSX component </span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><p>By using hooks like useState and useEffect, you can effectively manage state and side effects. Custom hooks further enhance code reuse and modularity. With a good understanding of hooks, you can write cleaner, more maintainable code in your React applications.</p>
<ul>
<li><a href="!--swig%EF%BF%BC3--">React:Using hooks with function based components</a></li>
</ul>
]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>hooks</tag>
        <tag>Frontend</tag>
      </tags>
  </entry>
  <entry>
    <title>NPM basic usage</title>
    <url>/2023/06/27/NPM-basic-usage/</url>
    <content><![CDATA[
<blockquote>
<p> NPM in a <em><strong>package management</strong></em> tool that&#39;s (usually) installed with Node.js. If you know python, npm is just like pip to python. It allows developers to easily install, manage, and share reusable code packages (also known as modules or packages) with their projects. npm provides access to a vast collection of open-source libraries and tools, enabling developers to leverage existing solutions and accelerate development.</p>
</blockquote>
<h3 id="Verify-installation"><a href="#Verify-installation" class="headerlink" title="Verify installation"></a>Verify installation</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm -v</span><br></pre></td></tr></table></figure>
<p>This command should print out npm&#39;s version if installed correctly.</p>
<h3 id="Install-modules"><a href="#Install-modules" class="headerlink" title="Install modules"></a>Install modules</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install &lt;Module name&gt;</span><br></pre></td></tr></table></figure>
<p>For example, to install <code>axios</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install axios</span><br></pre></td></tr></table></figure>
<p>To use the installed <code>axios</code> package</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const axios = require(&#x27;axios&#x27;);</span><br></pre></td></tr></table></figure>
<p>or following the ES6 syntax</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import axios from &#x27;axios&#x27;</span><br></pre></td></tr></table></figure>
<p>Install globally </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install &lt;Module name&gt; -g</span><br></pre></td></tr></table></figure>
<p>Uninstall a module</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm uninstall &lt;Module name&gt;</span><br></pre></td></tr></table></figure>
<p>List all installed modules</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm ls</span><br></pre></td></tr></table></figure>
<p>Search a module</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm search &lt;Module name&gt;</span><br></pre></td></tr></table></figure>
<p>Update a module</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm update &lt;Module name&gt;</span><br></pre></td></tr></table></figure>
<p>If you interrupted a previous <code>npm install</code> and now it’s giving errors, you can clear the previously installed <code>node_modules</code> by </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm cache clean</span><br></pre></td></tr></table></figure>
<h3 id="Configure-npm-registry"><a href="#Configure-npm-registry" class="headerlink" title="Configure npm registry"></a>Configure npm registry</h3><blockquote>
<p>NPM registries are the hub of npm packages, and when you do <code>npm install</code>, you are downloading packages from one of the registries.  Sometimes using the wrong registry might cause <code>npm install</code> to be extremely slow. The default npm registry should be <a href="https://registry.npmjs.org/">https://registry.npmjs.org</a></p>
</blockquote>
<p>View your registry </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm config get registry</span><br></pre></td></tr></table></figure>
<p>or list all the configs </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm config list</span><br></pre></td></tr></table></figure>
<p>Install modules from a different registry</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --registry=https://registry.npmjs.org</span><br></pre></td></tr></table></figure>
<p>Change registry globally </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm config set registry https://registry.npmjs.org</span><br></pre></td></tr></table></figure>
<h3 id="Working-with-package-json"><a href="#Working-with-package-json" class="headerlink" title="Working with package.json"></a>Working with <code>package.json</code></h3><blockquote>
<p>Just like you can export&#x2F;install dependencies of your project through <code>requirements.txt</code> when using python, <code>package.json</code> is a more powerful tool for easy package management.</p>
</blockquote>
<p>To generate <code>package.json</code> in your project</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm init (-y)</span><br></pre></td></tr></table></figure>
<p>NPM will ask you some questions after <code>npm init</code>,you can skip them by adding the flag <code>-y</code>.<br>By doing <code>npm init</code>, you are essentially creating a package in the folder where you run the command. </p>
<hr>
The generated `package.json` looks like this.
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm-test&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;package.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<hr> 

<ul>
<li><p><code>name</code>: Specifies the name of the package. It should be unique within the npm registry. For example: <code>&quot;name&quot;:&quot;express&quot;</code></p>
</li>
<li><p><code>version</code>: Represents the version of the package.  For example: <code>&quot;version&quot;:&quot;1.0.0&quot;</code></p>
</li>
<li><p><code>description</code>: Optional, a brief description of your package. </p>
</li>
<li><p><code>scripts</code>: Contains a collection of scripts that can be executed using the npm CLI. Common scripts include start, test, and custom scripts for various tasks. For example:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;jest&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>You can then run these scripts using the npm run command:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm run start</span><br><span class="line">npm run test</span><br></pre></td></tr></table></figure></li>
<li><p><code>author</code>: Represents the name or organization responsible for creating and maintaining the package. For example: </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;TJ Holowaychuk&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tj@vision-media.ca&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>license</code>: Specifies the license under which the package is distributed. It can be an SPDX identifier (e.g., MIT, Apache-2.0) or a path to a license file.</p>
</li>
<li><p><code>dependencies</code> : Lists the packages that the current package depends on to function correctly in production. The dependencies are installed when someone installs the package. For example:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;axios&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.4.0&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>Refer to the <a href="https://docs.npmjs.com/cli/v9/configuring-npm/package-json">official documentation</a> for more details.</p>
</li>
</ul>
<p>When you run <code>npm install &lt;Module name&gt;</code>, the module will be automatically added to the <code>dependencies</code> of package.json. With the <code>dependencies</code> in <code>package.json</code>, you can reuse and share the dependencies of your projects easily. Put <code>package.json</code> in your new project’s folder, and run </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>
<p>npm will install all the dependencies specified in <code>dependencies</code>.</p>
]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>npm</tag>
        <tag>package management</tag>
        <tag>Reference</tag>
      </tags>
  </entry>
  <entry>
    <title>[React hooks] 1:Adding state to function components using useState()</title>
    <url>/2023/06/26/React-hooks-1-Adding-state-to-function-components-using-useState/</url>
    <content><![CDATA[
<blockquote>
<p>State is a common concept when using class components with react. When coding in class components, we usually set the initial state in <code>constructor()</code> using <code>this.state = &#123;...&#125;</code>. <br><br>Accordingly, whenever <code>this.state</code> is updated using <code>this.setState()</code>, a <strong>re-render</strong> will be triggered, using the value from the new state. </p>
</blockquote>
<h3 id="Why-using-useState"><a href="#Why-using-useState" class="headerlink" title="Why using useState()?"></a>Why using <code>useState()</code>?</h3><p><code>useState()</code> is one of the most commonly used hooks that gives a <strong>function component</strong> state. Similar to class components, a re-render will be triggered if the function component used the variable declared using <code>useState()</code>. </p>
<h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h3><p>Common usage of <code>useState()</code> looks like this </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React, &#123; useState &#125; from &#x27;react&#x27; //Don&#x27;t forget the import statement!!!</span><br><span class="line">...</span><br><span class="line">const [x,setX] = useState(&lt;initialState&gt;); </span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>The code above is similar to </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">constructor()&#123;</span><br><span class="line">    this.state = &#123;</span><br><span class="line">        ...</span><br><span class="line">        x = &lt;initialState&gt;, //set x to its initial value</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    this.setX = (newX) =&gt; &#123;</span><br><span class="line">        this.setState(&#123;...this.state,newX&#125;) // set x to newVar</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>if we were using a class component. <br><br>As shown above, in the first snipplet, we </p>
<ol>
<li>Declared a variable <code>x</code></li>
<li>Set the value of <code>x</code> to <code>&lt;initialState&gt;</code>, where <code>&lt;initialState&gt;</code> can be anything like <code>false</code>,<code>null</code>,<code>1</code>,<code>[]</code> depending on the type of variable <code>x</code></li>
<li>Declared a function <code>setX</code> to update the value of <code>x</code> and trigger a re-render of any component using <code>x</code></li>
</ol>
<h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>Take the <a href="https://github.com/john-smilga/react-projects/tree/master/01-birthday-reminder">birthday reminder project</a> as an example<br><img src="/img/posts/bday-reminder.png" alt="image"><br>Here we have a list of people. Judging from the information presented to us, we have (at least) each person&#39;s </p>
<ol>
<li><code>icon image link</code></li>
<li><code>Name</code></li>
<li><code>Age</code><br>What we care about the most is this line <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const [people, setPeople] = useState(data)</span><br></pre></td></tr></table></figure>
which handles the logic “Clear list when the <code>Clear All</code> button was clicked”. Since <code>people</code> is supposed to be an array, <code>setPeople([])</code> sets <code>people</code> to an empty array, achieving the effect of clearing the list.<br>This line hooks the action up when the <code>Clear All</code> button was clicked. <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;button onClick=&#123;() =&gt; setPeople([])&#125;&gt;clear all&lt;/button&gt;</span><br></pre></td></tr></table></figure>
When <code>setPeople([])</code> is called, the value of <code>people</code> is updated to <code>[]</code>(empty array), and since <code>&lt;List/&gt;</code> uses <code>people</code>, it will be re-rendered and become an empty list.</li>
</ol>
<h3 id="Wait-a-minute🤔"><a href="#Wait-a-minute🤔" class="headerlink" title="Wait a minute🤔"></a>Wait a minute🤔</h3><p>You might want to do this when debugging and see if people has actually changed</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;button onClick=&#123;() =&gt;&#123;</span><br><span class="line">    setPeople([])</span><br><span class="line">    console.log(people)</span><br><span class="line">&#125;&#125;&gt;clear all&lt;/button&gt;</span><br></pre></td></tr></table></figure>
<p>Surprisingly, this will still print out the people array instead of an empty array. <br><br>This is because in React, the <code>useState</code> hook is <strong>asynchronous</strong>, meaning that the updated state value is not immediately available in the next line of code after calling the state setter function. Therefore, when you call <code>setPeople([])</code> and immediately log the value of people, you will still see the previous value (in this case, <code>data</code>) because the state update hasn’t taken effect yet.<br>According to the official documentation: </p>
<blockquote>
<p>The set function only updates the state variable for the next render. If you read the state variable after calling the set function, you will still get the old value that was on the screen before your call.<br>Meaning that your <code>console.log()</code> will never get the updated value since the updated value lives in the next render. </p>
</blockquote>
<h3 id="Updating-state-based-on-the-previous-state"><a href="#Updating-state-based-on-the-previous-state" class="headerlink" title="Updating state based on the previous state"></a>Updating state based on the previous state</h3><p>Another syntax that comes in handy is to update the state based on previous state. For example, the previous snipplet that sets <code>people</code> to <code>[]</code> can be written as </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">setPeople(people=&gt;[])</span><br></pre></td></tr></table></figure>
<p>or </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">setPeople(people6=&gt;&#123;</span><br><span class="line">    //this is an updater function</span><br><span class="line">    return []; </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="To-pass-a-state"><a href="#To-pass-a-state" class="headerlink" title="To pass a state"></a>To pass a state</h3><p>In the birthday-reminder project, there’s such a line using <code>&lt;List people=&#123;people&#125; /&gt;</code>, which passes the state <code>people</code> to be used by the <code>List</code> component.<br>Accordingly, the <code>List</code> component should also be ready to retrieve <code>people</code>. </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const List = (&#123; people &#125;) =&gt; &#123;</span><br><span class="line">    return (</span><br><span class="line">        ... </span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Now <code>people</code> is accessible by code inside of <code>List</code> component. </p>
<h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><ul>
<li>A component can have many variables declared using <code>useState()</code>, they are independent of each other, but the state updates are <strong>batched</strong>(only one rerender in a single event)</li>
<li>A re-render is only triggered when state is <strong>update</strong>, which means that no re-render happens if the new state is the same as the current state. </li>
<li>DON’T try to update the state by directly changing its value such as <code>people[0] = null</code> since state is designed to be <strong>read-only</strong></li>
<li>Follow the rules of using React hooks: <ol>
<li>Don’t call <code>useState()</code> in loops, condition, nested functions. Doing so might change the order of the hooks being called and cause inconsistent behavior&#x2F;state. </li>
<li>Only call <code>useState()</code> inside function components or custom hooks.</li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>hooks</tag>
        <tag>Frontend</tag>
      </tags>
  </entry>
  <entry>
    <title>[React hooks] 2:Listening on variables using useEffect()</title>
    <url>/2023/07/29/React-hooks-2-Listening-on-variables-using-useEffect/</url>
    <content><![CDATA[<p><img src="/img/posts/3.jpg" alt="image"></p>
<blockquote>
<p>How do we do extra things while updating states created with <code>useState()</code>? As said before, <code>setState()</code> is <em>asynchronous</em>, so we can’t get the updated value immediately. <code>useEffect()</code> is another useful hook that gets you that updated value.  <br> </p>
</blockquote>
<h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h3><p>Common usage of <code>useState()</code> looks like this </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React, &#123; useEffect &#125; from &#x27;react&#x27; //Don&#x27;t forget the import statement!!!</span><br><span class="line">...</span><br><span class="line">useEffect( &lt;some function&gt;, [&lt;list of dependencies&gt;] )</span><br></pre></td></tr></table></figure>
<p>Whenever <strong>any</strong> of the dependencies in the list <strong>changes its value</strong>, the <strong>function</strong> will be triggered. The <strong>function</strong> will also be triggered when the component is rendered for the <strong>first time</strong>.</p>
<h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>Here’s an example of getting the updated state correctly.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">const [foo,setFoo] = useState(false);</span><br><span class="line">useEffect(()=&gt;&#123; // using arrow function here</span><br><span class="line">    console.log(foo); </span><br><span class="line">&#125;,[foo]) // foo&#x27;s updated value will be printed whenever its updated</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h3 id="Pitfall-1-Infinite-re-render"><a href="#Pitfall-1-Infinite-re-render" class="headerlink" title="Pitfall 1: Infinite re-render"></a>Pitfall 1: Infinite re-render</h3><p>When the dependency list is <strong>not specified</strong>, the function inside <code>useEffect()</code> will be triggered on every re-render. However, it is not uncommon to use <code>setState()</code> inside of <code>useEffect()</code>…and that triggers another re-render, which then triggers <code>useEffect()</code>, which then triggers another re-render…and it becomes an infinite loop! The correct way to do this is to pass the dependency list and avoid including the state you are changing inside of the function. Or…you can just pass in an empty array <code>[]</code> to only trigger the function on first render. </p>
<h3 id="Pitfall-2-Ignored-cleanup"><a href="#Pitfall-2-Ignored-cleanup" class="headerlink" title="Pitfall 2: Ignored cleanup"></a>Pitfall 2: Ignored cleanup</h3><p>Sometimes we want to bind event listeners inside <code>useEffect()</code>. However, the catch is that event listeners aren’t <strong>unique</strong> themselves, which means that we can run into the issue of attaching a listener to something everytime the dependency is updated, causing the event to be responded for multiple times. Here we need the <strong>cleanup</strong> code. <br><br>The body of the function we passed into <code>useEffect()</code> is called <strong>setup</strong> code, which is executed on dependency updates, and if the function returns another function(optional), the returned function serves as the <strong>cleanup</strong> code that cleans up the <strong>setup</strong> code. <br><br>Here’s an example: </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const button = document.querySelector(&quot;#btn&quot;);</span><br><span class="line">useEffect(()=&gt;&#123;</span><br><span class="line">    const handleClick = () =&gt; &#123;</span><br><span class="line">        console.log(&quot;Clicked&quot;);</span><br><span class="line">    &#125;;</span><br><span class="line">    button.addEventListener(&#x27;click&#x27;,handleClick);</span><br><span class="line">    return () =&gt; button.removeEventListener(&#x27;click&#x27;,handleClick); //cleans up</span><br><span class="line">&#125;,[])</span><br></pre></td></tr></table></figure>

<h3 id="Pitfall-3-Async-useEffect"><a href="#Pitfall-3-Async-useEffect" class="headerlink" title="Pitfall 3: Async useEffect?"></a>Pitfall 3: Async useEffect?</h3><p>Sometimes you might want an asynchronous setup code like this: </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">useEffect(async ()=&gt;&#123;</span><br><span class="line">    await ... (some async function)</span><br><span class="line">&#125;,[])</span><br></pre></td></tr></table></figure>
<p>However, <code>useEffect()</code> does not allow asynchronous functions as its setup code, but you can call async functions inside of it: </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">useEffect(()=&gt;&#123;</span><br><span class="line">    const someAsyncFunc = async () =&gt; &#123;</span><br><span class="line">        await ... (some async function)</span><br><span class="line">    &#125;;</span><br><span class="line">    someAsyncFunc(); // ok</span><br><span class="line">&#125;,[])</span><br></pre></td></tr></table></figure>

<h3 id="Pitfall-4-Missing-reactive-dependencies"><a href="#Pitfall-4-Missing-reactive-dependencies" class="headerlink" title="Pitfall 4: Missing reactive dependencies"></a>Pitfall 4: Missing reactive dependencies</h3><p>“Reactive values”(props, state, variables declared inside component’s body) must be included inside of <code>useEffect()</code>‘s dependency list if they are used in the setup code. </p>
]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>hooks</tag>
        <tag>Frontend</tag>
      </tags>
  </entry>
  <entry>
    <title>Tailwindcss quick references</title>
    <url>/2023/06/28/Tailwindcss-quick-references/</url>
    <content><![CDATA[<blockquote>
<p>This post serves as a quick reference for <a href="https://tailwindcss.com/docs/installation"><em>tailwindcss</em></a></p>
</blockquote>
<h2 id="Utilities"><a href="#Utilities" class="headerlink" title="Utilities"></a>Utilities</h2><h4 id="Positioning"><a href="#Positioning" class="headerlink" title="Positioning"></a>Positioning</h4><ul>
<li><code>[None]</code>:all four(left,top,right,bottom)</li>
<li><code>x</code>: left &amp; right(x axis) </li>
<li><code>y</code>: top &amp; bottom(y axis)</li>
<li><code>s</code>: start(or left)</li>
<li><code>e</code>: end(or right)</li>
<li><code>t</code>: top</li>
<li><code>r</code>: right </li>
<li><code>b</code>: bottom</li>
<li><code>l</code>: left<blockquote>
<p>Hereafter abbrieviated as <code>pos</code></p>
</blockquote>
</li>
</ul>
<h4 id="Sizing"><a href="#Sizing" class="headerlink" title="Sizing"></a>Sizing</h4><ul>
<li><code>px</code>: 1px </li>
<li><code>[Number]</code>: 0.25*<code>[Number]</code>rem. For example: p-1&#x3D;padding:0.25rem</li>
<li><code>[Fraction]</code>: Supports denominator in [2,12]. For example: w-5&#x2F;6&#x3D;width:83.3% </li>
<li><code>full</code>: 100% </li>
<li><code>screen</code>: 100vh or 100vw, depending on height or width</li>
<li><code>min/max</code>: min&#x2F;max-content</li>
<li><code>fit</code>: fit-content</li>
<li><code>auto</code>: auto</li>
</ul>
<blockquote>
<p>Hereafter abbrieviated as <code>size</code> </p>
</blockquote>
<h4 id="Coloring"><a href="#Coloring" class="headerlink" title="Coloring"></a>Coloring</h4><ul>
<li><code>transparent</code>: transparent</li>
<li><code>black</code></li>
<li><code>white</code><blockquote>
<p>Hereafter abbrieviated as <code>color</code> </p>
</blockquote>
</li>
<li><code>[value]</code>:used after certain colors,supports value in [50,950] </li>
<li><code>[opacity]</code>:<ul>
<li><code>[color]-[value]/[opacity]</code>,here opacity is an int in [0,100]</li>
<li><code>[color]-[value]/[[opacity]]</code>,here opacity is a double in [0,1]</li>
</ul>
</li>
<li>…<br><a href="https://tailwindcss.com/docs/customizing-colors">Official documentation</a></li>
</ul>
<h4 id="Modifiers"><a href="#Modifiers" class="headerlink" title="Modifiers"></a>Modifiers</h4><p>Syntax: <code>[modifier]:[class]</code>, for example:<code>hover:bg-sky-700</code><br>Supported modifiers:</p>
<ul>
<li>Pseudo-classes, like :hover, :focus, :first-child, and :required</li>
<li>Pseudo-elements, like ::before, ::after, ::placeholder, and ::selection</li>
<li>Media and feature queries, like responsive breakpoints, dark mode, and prefers-reduced-motion</li>
<li>Attribute selectors, like [dir&#x3D;”rtl”] and [open]<br><a href="https://tailwindcss.com/docs/hover-focus-and-other-states">Official documentation</a></li>
</ul>
<h4 id="Columns"><a href="#Columns" class="headerlink" title="Columns"></a>Columns</h4><ul>
<li><code>[Number]</code>: supports values in [1,12], 12 is equal to 100%</li>
<li><code>[Size codenames]</code>:Supports values in [3xs,7xl]</li>
</ul>
<h4 id="Flex"><a href="#Flex" class="headerlink" title="Flex"></a>Flex</h4><p>Basis(use inside of flexbox)</p>
<ul>
<li><code>basis-[size]</code>: For example, <code>basis-px</code><br>Grow&#x2F;Shrink</li>
<li><code>grow</code>&#x2F;<code>grow-0</code>: control flex grow or not </li>
<li><code>shrink</code>&#x2F;<code>shrink-0</code>: similar to <code>grow</code><br>Order</li>
<li><code>order-[Number]/first/last</code>: control the order of an item in flexbox,<code>[Number]</code> supports values in [0,12]</li>
</ul>
<h4 id="Border-Divide-Outline-Ring-Box-Shadow"><a href="#Border-Divide-Outline-Ring-Box-Shadow" class="headerlink" title="Border, Divide Outline, Ring, Box Shadow"></a>Border, Divide Outline, Ring, Box Shadow</h4><p>Width: </p>
<ul>
<li><code>[None]</code>:1px</li>
<li><code>[Number]</code>:[Number]px, supports {0,2,4,8}<br>Rounding Size: </li>
<li><code>sm</code>:0.125rem</li>
<li><code>md</code>:0.375rem</li>
<li><code>lg</code>:0.5rem</li>
<li><code>xl</code>:0.75rem</li>
<li><code>2xl</code>:1rem</li>
<li><code>3xl</code>:1.5rem<br><em>Box shadow uses <code>shadow</code> and only uses rounding sizes of borders</em></li>
</ul>
<h4 id="Spacing"><a href="#Spacing" class="headerlink" title="Spacing"></a>Spacing</h4><ul>
<li>Padding: <code>p[pos]-[size]</code></li>
<li>Margin: <code>m[post]-[size]</code></li>
<li>Space between: <code>space-[pos]-[size]</code></li>
</ul>
]]></content>
      <tags>
        <tag>Frontend</tag>
        <tag>Reference</tag>
        <tag>tailwindcss</tag>
      </tags>
  </entry>
  <entry>
    <title>[React hooks] 3:Create the pointer that doesn&#39;t exist in Javascript using useRef()</title>
    <url>/2023/07/29/React-hooks-3-Create-the-pointer-that-doesn-t-exist-in-Javascript-using-useRef/</url>
    <content><![CDATA[<p><img src="/img/posts/4.jpg" alt="image"></p>
<blockquote>
<p><code>useState()</code> has enabled us to read&#x2F;write the “same” state variable across different components, but every modification comes with a re-render. However, there are such times when we don’t want that re-render. <code>useRef()</code> is what you want. </p>
</blockquote>
<p><a href="https://react.dev/reference/react/useRef">Official docs</a></p>
<h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h3><p>There’s no such thing as “pointer” in Javascript, but <code>useRef()</code> gives you a “pointer” just like what you’d use in C++!</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React, &#123;useRef&#125; from &#x27;react&#x27;; </span><br><span class="line">...</span><br><span class="line">const intRef = useRef(0) </span><br><span class="line">const inputRef = useRef(null) // a &quot;nullptr&quot;</span><br><span class="line">...</span><br><span class="line">return &lt;input ref=&#123;inputRef&#125;/&gt; // points inputRef to this DOM element</span><br></pre></td></tr></table></figure>
<p><code>useRef()</code> on takes in one argument, which is its initial value. You are allowed to access&#x2F;modify the initial value through <code>ref.current</code>, while not triggering a re-render. Also, the value persists across re-renders, while normal variables get reset on re-renders.  </p>
<h4 id="A-not-so-exciting-example"><a href="#A-not-so-exciting-example" class="headerlink" title="A not so exciting example"></a>A not so exciting example</h4><p>This example shows how to modify the value of a ref by <code>ref.current</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const intRef = useRef(0);</span><br><span class="line">const handleClick = () =&gt; &#123;</span><br><span class="line">  intRef.current+=1; // increment the value of intRef by 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="A-more-exciting-example"><a href="#A-more-exciting-example" class="headerlink" title="A more exciting example"></a>A more exciting example</h4><p>More times, we use <code>useRef()</code> to modify DOM elements conveniently. This saves us time from doing <code>querySelector</code> and provides a more “React” way of doing this. </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const inputRef = useRef(null);</span><br><span class="line">const handleInput = () =&gt; &#123;</span><br><span class="line">  console.log(inputRef.current.value);</span><br><span class="line">  if(inputRef.current.value.length&gt;100)&#123;</span><br><span class="line">    inputRef.current.value = &quot;&quot;; </span><br><span class="line">    // clears input if its value&#x27;s length exceeds 100</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">return &lt;input type=&quot;text&quot; ref=&#123;inputRef&#125;&gt;</span><br></pre></td></tr></table></figure>
<h3 id="Pitfall-1-Read-x2F-Write-ref-current-during-rendering"><a href="#Pitfall-1-Read-x2F-Write-ref-current-during-rendering" class="headerlink" title="Pitfall 1: Read&#x2F;Write ref.current during rendering"></a>Pitfall 1: Read&#x2F;Write <code>ref.current</code> during rendering</h3><p>We’d like to keep the result of rendering consistent if props, state, context don’t change, but ref persists its data across re-renders. Therefore, reading&#x2F;writing <code>ref.current</code> duing rendering(the body of function components) is not recommended. </p>
<h3 id="Pitfall-2-“Memory-leak”"><a href="#Pitfall-2-“Memory-leak”" class="headerlink" title="Pitfall 2: “Memory leak”"></a>Pitfall 2: “Memory leak”</h3><p>I’d like to think about <code>ref</code> as a C++ pointer. When you declare a ref like this </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const video = useRef(new VideoPlayer()); </span><br></pre></td></tr></table></figure>
<p>You “allocated memory” for that <code>new</code> VideoPlayer(), just like what happens when you use <code>new</code> in C++. Therefore, just like C++, if you assign the value to another <code>new</code> like this…</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">video.current = new VideoPlayer();</span><br></pre></td></tr></table></figure>
<p>In C++, you lost the address of the old object, which will cause a memory leak. Although this will not actually cause a memory leak, this creates expensive objects and we only want to manipulate a single object. </p>
]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>hooks</tag>
        <tag>Frontend</tag>
      </tags>
  </entry>
  <entry>
    <title>NLP basics quick note</title>
    <url>/2023/07/30/NLP-basics-quick-note/</url>
    <content><![CDATA[<blockquote>
<p>This post serves as a quick note for NLP basics </p>
</blockquote>
<h3 id="Concepts"><a href="#Concepts" class="headerlink" title="Concepts"></a>Concepts</h3><h4 id="Token"><a href="#Token" class="headerlink" title="Token"></a>Token</h4><p>The basic unit of a sequence of text. Can be a word, sentence, a character, etc.<br>Special tokens: </p>
<ul>
<li>sos: Start of sequence. Usually a special token to mark the start of sequence. </li>
<li>eos: Similar to sos, a special token to mark the end of sequence. </li>
<li>pad: We use the pad token to pad sequences of different lengths and make them of uniform lengths. This token will usually be ignored by the model since it doesn’t carry any useful information.</li>
</ul>
<h4 id="Corpus"><a href="#Corpus" class="headerlink" title="Corpus"></a>Corpus</h4><p>Text dataset, often has labels such as word type. </p>
<h4 id="Vocab"><a href="#Vocab" class="headerlink" title="Vocab"></a>Vocab</h4><p>The list of all possible tokens that can appear in the text. Every token has an idx number, and it’s mapped both ways.<br>3 tables:</p>
<ul>
<li>itos: index -&gt; token</li>
<li>stoi: token -&gt; index</li>
<li>freq: frequency of the tokens</li>
</ul>
<h4 id="Tokenization"><a href="#Tokenization" class="headerlink" title="Tokenization"></a>Tokenization</h4><p>Turning text into “tokens”, for example:<br><code>This is an example</code><br>to<br><code>This</code>, <code>is</code>, <code>an</code>, <code>example</code><br>And there are different ways of tokenization, the previous example was using <code>word tokenization</code>, here’s an example of <code>sentence tokenization</code>:<br><code>Hello! Welcome to my blog! Here&#39;s a quick note of NLP basics!</code><br>to<br><code>Hello!</code>, <code>Welcome to my blog!</code>, <code>Here&#39;s a quick note of NLP basics!</code> </p>
<h4 id="Stemming"><a href="#Stemming" class="headerlink" title="Stemming"></a>Stemming</h4><p>Finding the root of words. Such as <code>useful</code> to <code>use</code>, <code>rational</code> to <code>ration</code>, etc.<br>This is based on rules and there can be <em>overstemming</em> and <em>understemming</em>. </p>
<h4 id="Lemmatization"><a href="#Lemmatization" class="headerlink" title="Lemmatization"></a>Lemmatization</h4><p>Finding the form of the related word in the dictionary. Such as <code>bats</code> to <code>bat</code>, <code>workers</code> to <code>worker</code>, <code>was</code> to <code>be</code>, etc. Both stemming and lemmatization reduces inflectional forms to a common base form.</p>
<h4 id="Part-of-Speech-Tagging-POS-Tag"><a href="#Part-of-Speech-Tagging-POS-Tag" class="headerlink" title="Part of Speech Tagging(POS-Tag)"></a>Part of Speech Tagging(POS-Tag)</h4><p>Labeling words in a text according to their word types such as none, adjective, adverb, verb, etc.<br>POS-tagging is a supervised learning solution that uses features like previous word, next word, first letter, etc.<br><a href="https://www.ling.upenn.edu/courses/Fall_2003/ling001/penn_treebank_pos.html">Tags ref sheet</a></p>
<h4 id="Chunking-Shallow-parsing"><a href="#Chunking-Shallow-parsing" class="headerlink" title="Chunking(Shallow parsing)"></a>Chunking(Shallow parsing)</h4><p>Deducing the higher level units(phrases) made of atomic units like noun, verbs, adj, etc. For example:<br><code>Mary</code>(NP) <code>slapped</code>(VP) <code>the green witch</code>(NP)</p>
<h4 id="Parsing"><a href="#Parsing" class="headerlink" title="Parsing"></a>Parsing</h4><p>Recognizing the structure of a sentence. Shows how the grammatical units relate to each other. Another way of showing relationship is <em>dependency parsing</em>. </p>
<h4 id="Encoding"><a href="#Encoding" class="headerlink" title="Encoding"></a>Encoding</h4><p>The process of converting text to numbers. Mainly has 2 steps: tokenization and convert_tokens_to_ids(convert tokens to numbers). </p>
<h4 id="Decoding"><a href="#Decoding" class="headerlink" title="Decoding"></a>Decoding</h4><p>Convert the output ids to text. </p>
<h4 id="Work-Embedding"><a href="#Work-Embedding" class="headerlink" title="Work Embedding"></a>Work Embedding</h4><p>A way to map words to vector space. Turns semantic info of words to vectors and is able to calculate similarity between words. </p>
<h4 id="N-tuple"><a href="#N-tuple" class="headerlink" title="N-tuple"></a>N-tuple</h4><p>Generating consecutive n-tuples from tokenized text, for example:<br><code>This is an example</code><br>to<br><code>(this, is, an)</code>,<code>(is, an, example)</code><br>Sometimes n-tuples of characters is also used when subword has some useful information. Like <code>-ol</code> from <code>methanol</code>.</p>
<h3 id="Libraries"><a href="#Libraries" class="headerlink" title="Libraries"></a>Libraries</h3><p>Here’s a list of common python NLP libraries</p>
<ul>
<li>nltk</li>
<li>textblob</li>
<li>spacy</li>
</ul>
<h3 id="A-general-NLP-workflow"><a href="#A-general-NLP-workflow" class="headerlink" title="A general NLP workflow"></a>A general NLP workflow</h3><ol>
<li>Check device (CPU or GPU)</li>
<li>Prepare data: Use existing dataset or gather data yourself</li>
<li>Tokenize data(if needed): Convert text(sentence or paragraph or whatever) into a list of tokens using a tokenizer</li>
<li>Build vocab(if needed): Build the vocab from the tokens obtained from the training data. Don’t forget to add any special tokens(pad,bos,eos,etc.)</li>
<li>Convert tokens to ids: Use the vocab built before to convert tokens into numbers. </li>
<li>Batch and pad sequences(if needed): Pad the sequences in the same batch since tensors of different lengths can’t be processed. (No need if no batching). Add bos and eos tokens if needed. Convert data into tensors. </li>
<li>Load data, define model, criterion, optimizer, etc. and start training.</li>
</ol>
]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>NLP</tag>
        <tag>Machine Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>Personal learning footprint</title>
    <url>/2023/08/05/Personal-learning-footprint/</url>
    <content><![CDATA[<p><img src="/img/posts/6.jpg" alt="image"></p>
<blockquote>
<p>This post is a personal archive of what I’ve read &amp; learnt on the internet, mostly related to coding. </p>
</blockquote>
<h3 id="Python-Context-Managers-Generators-Decorators"><a href="#Python-Context-Managers-Generators-Decorators" class="headerlink" title="Python: Context Managers, Generators, Decorators"></a>Python: Context Managers, Generators, Decorators</h3><p><a href="https://medium.com/@sumeetsarkar/trinity-of-context-managers-generators-decorators-4809a991c76b">Trinity of Context Managers, Generators &amp; Decorators</a></p>
<ul>
<li><strong>Context Manager</strong>: Serves as a wrapper that executes enter and exit code around a piece of code. Used with <code>with</code>, like <code>open</code> is actually a Context Manager class. All such classes implement <code>__enter__</code> and <code>__exit__</code> functions, and sometimes <code>__init__</code> is used to pass parameters. </li>
<li><strong>Generator</strong>: Not only returns iterator, but also divides function logics into pieces. First, the function ends when it <code>return</code>, but it resumes from where it paused if it <code>yield</code>. This achieves <strong>Coroutine</strong>(multiple sub-routines on one thread). When we use <code>yield</code> to return the result, the function returns an iterator that can be iterated using <code>for</code>, <code>__iter()</code> and <code>__next__()</code> are implemented implicitly. Guarantees the order. </li>
<li><strong>Decorator</strong>: Can be function&#x2F;class. The core idea is to pass in the decorated function(as a parameter&#x2F;init args) and do extra things with that function. The function decorator returns an internal function to be called and the class decorator implements <code>__call__()</code></li>
</ul>
<h3 id="Python-Metaclass"><a href="#Python-Metaclass" class="headerlink" title="Python: Metaclass"></a>Python: Metaclass</h3><p><a href="https://www.python-engineer.com/posts/metaclasses-python/">What are metaclasses in Python</a></p>
<ul>
<li><strong>Metaclass</strong>: Dynamically modify&#x2F;define a User-defined class. Must inherit <code>type</code> class, and implement <code>__new__()</code>. The User-defined class specifies its <code>metaclass</code> when inheriting it. Can modify&#x2F;read the User-defined class’s variables when through its <code>attributes</code> from the <code>__new__</code> function. An example of this is Django’s Model classes. When you want the user to inherit Django’s <code>models.Model</code> class, you expect them to only have <code>models.XXXField</code> variables initially, so that the parent class <code>models.Model</code> can register the model to the database smoothly without errors. A metaclass can control that only <code>models.XXXField</code> are left in the User-defined models.</li>
</ul>
<h3 id="Python-Async-Programming"><a href="#Python-Async-Programming" class="headerlink" title="Python: Async Programming"></a>Python: Async Programming</h3><p> <a href="https://superfastpython.com/python-asyncio/#What_is_Asynchronous_Programming">Python Asyncio: The Complete Guide</a><br> <a href="https://superfastpython.com/asyncio-run-coroutine/#Need_to_Run_An_Asyncio_Coroutine">How to Run an Asyncio Coroutine in Python</a><br><code>asyncio</code> is Python’s async library that implements async programming using coroutine. </p>
<h4 id="Using-async"><a href="#Using-async" class="headerlink" title="Using async"></a>Using <code>async</code></h4><ul>
<li>Define a coroutine:<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">async def custom_coro():</span><br><span class="line">    # do something</span><br></pre></td></tr></table></figure></li>
<li>Create a coroutine object(no execution):<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">coro = custom_coro()</span><br></pre></td></tr></table></figure></li>
<li>Execute a coroutine object with <code>asyncio.run</code><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">asyncio.run(coro)</span><br></pre></td></tr></table></figure></li>
<li>Execute another coroutine with <code>await</code>: <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">await custom_coro() # must be inside an async context</span><br></pre></td></tr></table></figure></li>
<li>Execute coroutine by wrapping the object with task <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">task = asyncio.create_task(coro) # must be inside an async context</span><br><span class="line">await task # wait for the task to complete</span><br></pre></td></tr></table></figure></li>
<li>Iterating through <strong>async generator</strong><br>First create an async generator<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">async def hello(cnt):</span><br><span class="line">    for i in range(cnt):</span><br><span class="line">        yield f&quot;Hello&#123;cnt&#125;&quot;</span><br></pre></td></tr></table></figure>
Run and iterate through it in another async function<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def hello2():</span><br><span class="line">    hello_coro = hello(5)</span><br><span class="line">    async for item in hello_coro: # it&#x27;s an coro object here</span><br><span class="line">        print(item)</span><br><span class="line">asyncio.run(hello2()) </span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="3-Reasons-to-use-asyncio"><a href="#3-Reasons-to-use-asyncio" class="headerlink" title="3 Reasons to use asyncio"></a>3 Reasons to use <code>asyncio</code></h4><ol>
<li>Need to adopt coroutines. We can have more coroutines than concurrent threads(provided by <code>threading</code>). Coroutines are provided by the language(instead of OS) and are suited to <strong>non-blocking IO</strong> and CPU-bound tasks. Threads&#x2F;processes do multitasking through OS, which is <strong>preemptive multitasking</strong>. Coroutines do multitasking through <strong>cooperating multitasking</strong>, they are functions that can be suspended and resumed.  </li>
<li>To use Async Programming paradigm. </li>
<li>To use Non-Block I&#x2F;O.</li>
</ol>
<h3 id="OAuth2-An-authorization-framework"><a href="#OAuth2-An-authorization-framework" class="headerlink" title="OAuth2:An authorization framework"></a>OAuth2:An authorization framework</h3><p><a href="https://www.digitalocean.com/community/tutorials/an-introduction-to-oauth-2">An Introduction to OAuth 2</a><br>Works by delegating user authentication to user accounts holder(e.g. Google, Twitter, Github) and authorizing third party apps(e.g. Games using google account to sign in) to access the accounts. </p>
<h4 id="4-Roles"><a href="#4-Roles" class="headerlink" title="4 Roles"></a>4 Roles</h4><ul>
<li>Resource Owner: The user who holds the account</li>
<li>Client: The third party app</li>
<li>Resource Server: The user accounts holder, has all the accounts </li>
<li>Authorization Server: Verifies the identity of the user and gives access tokens to the app.<br>(A backend can be both a Resource Server and an Auth Server)</li>
</ul>
<h4 id="Abstract-Flow"><a href="#Abstract-Flow" class="headerlink" title="Abstract Flow"></a>Abstract Flow</h4><ol>
<li>App–Auth Request–&gt;User</li>
<li>User–Auth Grant–&gt;App</li>
<li>App–Auth Grant–&gt;Auth Server</li>
<li>Auth Server–Access Token–&gt;App</li>
<li>App–Access Token–&gt;Resource Server</li>
<li>Resource Server–Protected Resource–&gt;App</li>
</ol>
<h4 id="App-Registration"><a href="#App-Registration" class="headerlink" title="App Registration"></a>App Registration</h4><p>If you are developing the third party app, you must register the app with the account holder(e.g. Google, Github). After that, you’ll get Client ID and Client Secret to consume the service securely. Client Secret must be kept private. </p>
<h4 id="3-types-of-Auth-Grant"><a href="#3-types-of-Auth-Grant" class="headerlink" title="3 types of Auth Grant:"></a>3 types of Auth Grant:</h4><ol>
<li>Auth Code: For server-side apps. Redirection based flow. App must be able to interact with the web browser. </li>
<li>Client Credentials: For app to access its own service account. Auth Server grants access token for the app to use its own account. </li>
<li>Device Code: For devices that lack a browser or have limited inputs to get an access token and access a user’s account. The Auth endpoint returns a unique device code(a number or QR code), and the user enters it on a machine to authenticate.</li>
</ol>
<h3 id="JWT-JSON-Web-Tokens"><a href="#JWT-JSON-Web-Tokens" class="headerlink" title="JWT: JSON Web Tokens"></a>JWT: JSON Web Tokens</h3><p><a href="https://jwt.io/introduction">Introduction to JSON Web Tokens</a><br>JWT is a standard that defines a way to securely transmit information between parties as a JSON object. </p>
<h4 id="Use-Cases"><a href="#Use-Cases" class="headerlink" title="Use Cases"></a>Use Cases</h4><ol>
<li>Authorization: Once the user is logged in, each subsequent request will include the JWT that allows the user to access resources. </li>
<li>Info Exchange: JWT is a good way to transmit info between parties because JWTs can be signed.</li>
</ol>
<h4 id="3-Parts-of-JWT"><a href="#3-Parts-of-JWT" class="headerlink" title="3 Parts of JWT:"></a>3 Parts of JWT:</h4><ol>
<li>Header: Usually has type of the token(JWT in this case) and signing algorithm used(e.g. SHA256, RSA). </li>
<li>Payload: Contains the actual data(e.g. username,userid). There are 3 types of claims(data)<ul>
<li>Registered: Such as iss (issuer), exp (expiration time), sub (subject), aud (audience)</li>
<li>Public: Defined at will</li>
<li>Private: Created to share info between parties that agree on using them</li>
</ul>
</li>
<li>Signature: Used to verify the message wasn’t changed along the way.</li>
</ol>
]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>School</tag>
        <tag>Archive</tag>
      </tags>
  </entry>
  <entry>
    <title>Audio Deep Learning Notes</title>
    <url>/2023/08/20/Audio-Deep-Learning-Notes/</url>
    <content><![CDATA[<blockquote>
<p>This post serves as a quick note for Audio ML<br><a href="https://towardsdatascience.com/audio-deep-learning-made-simple-part-1-state-of-the-art-techniques-da1d3dff2504">Source</a></p>
</blockquote>
<h3 id="Sound"><a href="#Sound" class="headerlink" title="Sound"></a>Sound</h3><p>Audios are signals that can be represented as waves. </p>
<h4 id="3-basic"><a href="#3-basic" class="headerlink" title="3 basic"></a>3 basic</h4><ul>
<li>Amplitude</li>
<li>Frequency </li>
<li>Shape</li>
</ul>
<h4 id="Representation"><a href="#Representation" class="headerlink" title="Representation"></a>Representation</h4><p>We can’t represent the continuous waves of the signals, but we can take a series of points with the same interval and measure their value. Each point is a <code>sample</code>, and <code>sample rate</code> is the number of samples per second. </p>
<p>A common approach to represent audio data is to convert audio into images and process the images. </p>
<h4 id="Spectrum"><a href="#Spectrum" class="headerlink" title="Spectrum"></a>Spectrum</h4><p>Signals of diff freq can be added together to represent any sound in the real world, and thus any signal can be expressed as a sum of many distinct freq.<br>Spectrum plots all the freq in a signal with amplitude and freq. It is graph of amplitude vs frequency.<br><code>Fundamental Frequency</code>: Lowest freq in a signal.<br><code>Harmonics</code>: Freqs that are multiples of the fundamental frequency. </p>
<h4 id="Spectrograms"><a href="#Spectrograms" class="headerlink" title="Spectrograms"></a>Spectrograms</h4><p>A signal’s spectrum varies over time, and thus a graph that plots spectrum over time is called <code>spectogram</code>. Spectrogram plots frequency vs time. We take spectrum again and again in different times and join them as a single plot. Amplitude is represented as different colors for each freq, the brighter the higher energy.<br>Spectrograms are produced using Fourier Transforms. </p>
<h4 id="Audio-Deep-Learning"><a href="#Audio-Deep-Learning" class="headerlink" title="Audio Deep Learning"></a>Audio Deep Learning</h4><ul>
<li>Start with raw .wav audio file</li>
<li>Convert audio into spectrogram</li>
<li>Process spectrogram(image) with standard CNN architectures<br>Tasks:</li>
<li>Audio Classification: E.g.: What is the type&#x2F;source of the sound? </li>
<li>Audio Separation &amp; Segmentation: E.g.: Separating audios from different speakers</li>
<li>Music Genre Classification: Multi-label classification problem. E.g.: Categorize genre, mood, style used for a song. </li>
<li>Music Generation: E.g.: Generate music from an image</li>
<li>Music Transcription: E.g.: AI-generated sheet music</li>
<li>Voice recognition: Another classification problem. E.g.: Recognizing speaker of a speech</li>
<li>Speech to Text: Extract words from the audio. One of the most challenging applications. </li>
<li>Text to Speech: Generate audio from the words.</li>
</ul>
<h4 id="The-Scales"><a href="#The-Scales" class="headerlink" title="The Scales"></a>The Scales</h4><p>A scale of pitches. Since humans don’t perceive frequencies linearly and we are more sensitive to low frequencies, the Mel Scale was developed to adapt to human’s log-scale perceptions. Similarly, we also perceive loudness(amplitude) logrithmatically, and we use the Decibel Scale for loudness. </p>
<h4 id="Spectrogram-Optimization"><a href="#Spectrogram-Optimization" class="headerlink" title="Spectrogram Optimization"></a>Spectrogram Optimization</h4><ul>
<li>Fast Fourier Transform(FFT): FFT is an efficient algorithm to compute the expensive Discrete Fourier Transform(DFT). FFT doesn’t give you how frequencies changed over time though. </li>
<li>Short-time Fourier Transform(STFT): Breaks audio signal into smaller sections using a sliding time window, do FFT on each section and combines them. This captures frequency variations over time.</li>
</ul>
<p>Frequencies are split into multiple bands for better representation. </p>
<p>Mel Spectrogram Hyperparameters:</p>
<ul>
<li>fmin: minimum freq</li>
<li>fmax: maxmimum freq</li>
<li>n_mels: number of frequency bands</li>
</ul>
<h4 id="Data-Augmentation"><a href="#Data-Augmentation" class="headerlink" title="Data Augmentation"></a>Data Augmentation</h4><p>Normal image augmentations such as flip and rotation won’t work with spectrograms since they change the sound it represents. Special augmentations are applied to spectrograms. </p>
<ul>
<li>Freq mask: Randomly mask out a range of consecutive freqs by adding horizontal bars. </li>
<li>Time mask: Similar to freq mask, but use vertical bars.</li>
</ul>
]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Machine Learning</tag>
        <tag>Audio Signal Processing</tag>
      </tags>
  </entry>
</search>
